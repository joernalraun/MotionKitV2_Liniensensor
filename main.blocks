<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="9G}I8F@IUAEWZlq3ZkEB" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="%$?(Sm#Bc;1!dA-`j/V+"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace maqueen {" line1="" line2="    export enum DistanceUnit {" line3="        //% blockId=maqueen_DistanceUnitCentimeters block=&quot;cm&quot;" line4="        Centimeters," line5="    }" line6="" line7="    export enum Servos {" line8="        //% blockId=&quot;maqueen_ServoS1&quot; block=&quot;S1&quot;" line9="        S1 = 0," line10="        //% blockId=&quot;maqueen_ServoS2&quot; block=&quot;S2&quot;" line11="        S2 = 1" line12="    }" line13="" line14="    export enum Motors {" line15="        //% blockId=&quot;maqueen_MotorLeft&quot; block=&quot;links&quot;" line16="        M1 = 0," line17="        //% blockId=&quot;maqueen_MotorRight&quot; block=&quot;rechts&quot;" line18="        M2 = 1," line19="        //% blockId=&quot;maqueen_MotorAll&quot; block=&quot;beide&quot;" line20="        All = 2" line21="    }" line22="" line23="    export enum Dir {" line24="        //% blockId=&quot;maqueen_DirCW&quot; block=&quot;vorw채rts&quot;" line25="        CW = 0," line26="        //% blockId=&quot;maqueen_DirCCW&quot; block=&quot;r체ckw채rts&quot;" line27="        CCW = 1" line28="    }" line29="" line30="    export enum Led {" line31="        //% blockId=&quot;maqueen_LedLeft&quot; block=&quot;links&quot;" line32="        LedLeft = 0," line33="        //% blockId=&quot;maqueen_LedRight&quot; block=&quot;rechts&quot;" line34="        LedRight = 1," line35="        //% blockId=&quot;maqueen_LedAll&quot; block=&quot;beide&quot;" line36="        LedAll = 2" line37="    }" line38="" line39="    export enum LedSwitch {" line40="        //% blockId=&quot;maqueen_LedOn&quot; block=&quot;AN&quot;" line41="        LedOn = 1," line42="        //% blockId=&quot;maqueen_LedOff&quot; block=&quot;AUS&quot;" line43="        LedOff = 0" line44="    }" line45="" line46="    export enum Patrol {" line47="        //% blockId=&quot;maqueen_PatrolLeft&quot; block=&quot;links&quot;" line48="        PatrolLeft = 0," line49="        //% blockId=&quot;maqueen_PatrolRight&quot; block=&quot;rechts&quot;" line50="        PatrolRight = 1" line51="    }" line52="" line53="    export enum Brightness {" line54="        //% blockId=&quot;maqueen_Bright&quot; block=&quot;hell&quot;" line55="        Bright = 0," line56="        //% blockId=&quot;maqueen_Dark&quot; block=&quot;dunkel&quot;" line57="        Dark = 1" line58="    }" line59="" line60="    export enum Voltage {" line61="        //% blockId=&quot;maqueen_High&quot; block=&quot;high&quot;" line62="        High = 1," line63="        //% blockId=&quot;maqueen_Low&quot;block=&quot;low&quot;" line64="        Low = 0" line65="    }" line66="" line67="" line68="    const IICADRRESS = 0x10;" line69="" line70="    let irFlag = 0;" line71="    let ltFlag = 0;" line72="    let ltStatus = 0;" line73="" line74="    let irCallback: (message: number) =&gt; void = null;" line75="    let ltCallback: Action = null;" line76="" line77="" line78="    /**" line79="     * Read ultrasonic sensor." line80="     */" line81="" line82="    //% weight=95" line83="    //% blockId=maqueen_ultrasonic block=&quot;Ultraschallsensor |%unit &quot;" line84="    export function ultrasonic(unit: DistanceUnit, maxCmDistance = 500): number {" line85="        let integer = readData(0x28, 2);" line86="        let distance = integer[0] &lt;&lt; 8 | integer[1];" line87="        return (distance &gt; 399 || distance &lt; 1) ? -1 : distance;" line88="    }" line89="" line90="    /**" line91="     * Set the Maqueen servos." line92="     */" line93="" line94="    //% weight=90" line95="    //% blockId=maqueen_servoRun block=&quot;Servo|%index|Winkel|%angle&quot;" line96="    //% angle.shadow=&quot;protractorPicker&quot;" line97="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2" line98="    export function servoRun(index: Servos, angle: number): void {" line99="        if (index == Servos.S1) {" line100="            writeData([0x14, angle]);" line101="        } else if (index == Servos.S2) {" line102="            writeData([0x15, angle]);" line103="        } else {" line104="            writeData([0x14, angle]);" line105="            writeData([0x15, angle]);" line106="        }" line107="    }" line108="" line109="    /**" line110="     * Set the direction and speed of Maqueen motor." line111="     */" line112="" line113="    //% weight=85" line114="    //% blockId=maqueen_motorRun block=&quot;Motor|%index|Richtung|%direction|Tempo|%speed&quot;" line115="    //% speed.min=0 speed.max=255 speed.defl=200" line116="    //% index.fieldEditor=&quot;gridpicker&quot; index.fieldOptions.columns=2" line117="    //% direction.fieldEditor=&quot;gridpicker&quot; direction.fieldOptions.columns=2" line118="    export function motorRun(index: Motors, direction: Dir, speed: number): void {" line119="        if (index == Motors.M1) {" line120="            writeData([0x00, direction, speed]);" line121="        } else if (index == Motors.M2) {" line122="            writeData([0x02, direction, speed]);" line123="        } else {" line124="            writeData([0x00, direction, speed]);" line125="            writeData([0x02, direction, speed]);" line126="        }" line127="    }" line128="" line129="    /**" line130="     * Stop the Maqueen motor." line131="     */" line132="" line133="    //% weight=80" line134="    //% blockId=maqueen_motorStop block=&quot;Motor |%motors anhalten&quot;" line135="    //% motors.fieldEditor=&quot;gridpicker&quot; motors.fieldOptions.columns=2 " line136="    export function motorStop(index: Motors): void {" line137="        if (index == Motors.M1) {" line138="            writeData([0x00, 0, 0]);" line139="        } else if (index == Motors.M2) {" line140="            writeData([0x02, 0, 0]);" line141="        } else {" line142="            writeData([0x00, 0, 0]);" line143="            writeData([0x02, 0, 0]);" line144="        }" line145="    }" line146="" line147="    /**" line148="     * Turn on/off the LEDs." line149="     */" line150="" line151="    //% weight=75" line152="    //% blockId=maqueen_writeLED block=&quot;LED |%led |%ledswitch&quot;" line153="    //% led.fieldEditor=&quot;gridpicker&quot; led.fieldOptions.columns=2 " line154="    //% ledswitch.fieldEditor=&quot;gridpicker&quot; ledswitch.fieldOptions.columns=2" line155="    export function writeLED(led: Led, ledswitch: LedSwitch): void {" line156="        if (led == Led.LedLeft) {" line157="            writeData([0x0B, ledswitch]);" line158="        } else if (led == Led.LedRight) {" line159="            writeData([0x0C, ledswitch]);" line160="        } else {" line161="            writeData([0x0B, ledswitch]);" line162="            writeData([0x0C, ledswitch]);" line163="        }" line164="    }" line165="" line166="    //% weight=74" line167="    //% blockId=maqueen_setColor block=&quot;RGB-LED |%color&quot;" line168="    //% color.shadow=&quot;colorNumberPicker&quot;" line169="    export function setColor(color: number): void {" line170="        writeData([0x18, (color &gt;&gt; 16) &amp; 0xff]);" line171="        writeData([0x19, (color &gt;&gt; 8) &amp; 0xff]);" line172="        writeData([0x1A, color &amp; 0xff]);" line173="    }" line174="" line175="    //% weight=73" line176="    //% blockId=maqueen_setRgb block=&quot;rot |%red gr체n |%green blau |%blue&quot;" line177="    //% red.min=0 red.max=255 red.defl=200" line178="    //% green.min=0 green.max=255 green.defl=200" line179="    //% blue.min=0 blue.max=255 blue.defl=200" line180="    //% advanced=true" line181="    export function setRgb(red: number, green: number, blue: number): number {" line182="        return (red &lt;&lt; 16) + (green &lt;&lt; 8) + (blue);" line183="    }" line184="" line185="    /**" line186="     * Read line tracking sensor." line187="     */" line188="" line189="    //% weight=70" line190="    //% blockId=maqueen_readPatrol block=&quot;Liniensensor|%patrol|%brightness&quot;" line191="    //% patrol.fieldEditor=&quot;gridpicker&quot; patrol.fieldOptions.columns=2 " line192="    //% brightness.fieldEditor=&quot;gridpicker&quot; brightness.fieldOptions.columns=2" line193="    export function readPatrol(patrol: Patrol, brightness: Brightness): boolean {" line194="        let data = readData(0x1D, 1)[0];" line195="        let sensorValue = 0;" line196="" line197="        if (patrol == Patrol.PatrolLeft) {" line198="            sensorValue = (data &amp; 0x01) === 0 ? 0 : 1;" line199="        } else if (patrol == Patrol.PatrolRight) {" line200="            sensorValue = (data &amp; 0x02) === 0 ? 0 : 1;" line201="        }" line202="" line203="        return brightness == Brightness.Bright ? sensorValue == 0 : sensorValue == 1;" line204="    }" line205="" line206="    /**" line207="     * Read the version number." line208="     */" line209="" line210="    //% weight=65" line211="    //% blockId=maqueen_getVersion block=&quot;Versionsnummer&quot;" line212="    //% deprecated=true" line213="    export function getVersion(): string {" line214="        let dataLen = readData(0x32, 1)[0];" line215="        let buf = readData(0x33, dataLen);" line216="        let version = &quot;&quot;;" line217="        for (let index = 0; index &lt; dataLen; index++) {" line218="            version += String.fromCharCode(buf[index])" line219="        }" line220="        return version;" line221="    }" line222="" line223="    /**" line224="     * Line tracking sensor event function" line225="     */" line226="" line227="    //% weight=60" line228="    //% blockId=maqueen_ltEvent block=&quot;an|%value Linienfolger|%vi&quot;" line229="    //% advanced=true" line230="    //% deprecated=true" line231="    export function ltEvent(value: Patrol, vi: Voltage, ltcb: Action) {" line232="        ltFlag = 1;" line233="        ltCallback = ltcb;" line234="        if (value == Patrol.PatrolLeft) {" line235="            if (vi == Voltage.High) {" line236="                ltStatus = 0x11;" line237="            } else {" line238="                ltStatus = 0x12;" line239="            }" line240="        } else {" line241="            if (vi == Voltage.High) {" line242="                ltStatus = 0x13;" line243="            } else {" line244="                ltStatus = 0x14;" line245="            }" line246="        }" line247="    }" line248="" line249="    /**" line250="     * Get the value of the infrared sensor" line251="     */" line252="" line253="    //% weight=55" line254="    //% blockId=maqueen_irRead block=&quot;IR Wert&quot;" line255="    export function irRead(): number {" line256="        let buf2 = readData(0x2B, 4);" line257="        let data2 = buf2[3] | (buf2[2] &lt;&lt; 8) | (buf2[1] &lt;&lt; 16) | (buf2[0] &lt;&lt; 24);" line258="        return irKeyValueConversion(data2);" line259="    }" line260="" line261="    /**" line262="     * Infrared sensor event function" line263="     */" line264="" line265="    //% weight=50" line266="    //% blockId=maqueen_irEvent block=&quot;Wenn IR empfangen&quot;" line267="    //% draggableParameters" line268="    //% advanced=true" line269="    export function irEvent(ircb: (message: number) =&gt; void) {" line270="        irFlag = 1;" line271="        irCallback = ircb;" line272="    }" line273="" line274="    function readData(reg: number, len: number): Buffer {" line275="        pins.i2cWriteNumber(IICADRRESS, reg, NumberFormat.UInt8BE);" line276="        return pins.i2cReadBuffer(IICADRRESS, len, false);" line277="    }" line278="" line279="    function writeData(buf: number[]): void {" line280="        pins.i2cWriteBuffer(IICADRRESS, pins.createBufferFromArray(buf));" line281="    }" line282="" line283="    function irKeyValueConversion(data: number): number {" line284="        let data1 = 0;" line285="        switch (data) {" line286="            case 0xFD00FF: data1 = 0; break;" line287="            case 0xFD807F: data1 = 1; break;" line288="            case 0xFD40BF: data1 = 2; break;" line289="            case 0xFD20DF: data1 = 4; break;" line290="            case 0xFDA05F: data1 = 5; break;" line291="            case 0xFD609F: data1 = 6; break;" line292="            case 0xFD10EF: data1 = 8; break;" line293="            case 0xFD906F: data1 = 9; break;" line294="            case 0xFD50AF: data1 = 10; break;" line295="            case 0xFD30CF: data1 = 12; break;" line296="            case 0xFDB04F: data1 = 13; break;" line297="            case 0xFD708F: data1 = 14; break;" line298="            case 0xFD08F7: data1 = 16; break;" line299="            case 0xFD8877: data1 = 17; break;" line300="            case 0xFD48B7: data1 = 18; break;" line301="            case 0xFD28D7: data1 = 20; break;" line302="            case 0xFDA857: data1 = 21; break;" line303="            case 0xFD6897: data1 = 22; break;" line304="            case 0xFD18E7: data1 = 24; break;" line305="            case 0xFD9867: data1 = 25; break;" line306="            case 0xFD58A7: data1 = 26; break;" line307="            case 0: data1 = -1; break;" line308="            default: data1 = data &amp; 0xff; break;" line309="        }" line310="        return data1;" line311="    }" line312="" line313="    basic.forever(() =&gt; {" line314="        if (irFlag == 1) {" line315="            let buf3 = readData(0x2B, 4);" line316="            let data3 = buf3[3] | (buf3[2] &lt;&lt; 8) | (buf3[1] &lt;&lt; 16) | (buf3[0] &lt;&lt; 24);" line317="            if (data3 != 0) {" line318="                irCallback(irKeyValueConversion(data3));" line319="            }" line320="        }" line321="        if (ltFlag == 1) {" line322="            let data4 = readData(0x1D, 1)[0];" line323="            switch (ltStatus) {" line324="                case 0x11: if (data4 &amp; 0x01) { ltCallback(); break }" line325="                case 0x12: if (!(data4 &amp; 0x01)) { ltCallback(); break }" line326="                case 0x13: if (data4 &amp; 0x02) { ltCallback(); break }" line327="                case 0x14: if (!(data4 &amp; 0x02)) { ltCallback(); break }" line328="            }" line329="        }" line330="        basic.pause(100);" line331="    })" line332="}" numlines="333"></mutation></block></statement></block></xml>